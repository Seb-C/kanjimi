name: Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          **/node_modules
          ~/.cache/Cypress
          ~/.npm
        key: cache-node-modules-${{ hashFiles('**/package-lock.json') }}
    - uses: actions/cache@v2
      with:
        path: |
          www/**/*.build.*
          extension/*.build.*
        key: cache-build-${{ github.run_id }}-${{ github.run_number }}
    - run: npm install
    - run: docker-compose up -d --build
    - name: Waiting for the dockers to be ready
      run: timeout 3m bash -c 'until [[ "$(docker ps --filter health=starting -q | wc -l)" == "0" ]]; do sleep 1; done'
    - run: docker ps
      if: failure()
    - run: make test
    - run: docker-compose logs
      if: failure()
  cypress_tests:
    name: Cypress tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [firefox, chrome]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          www/**/*.build.*
          extension/*.build.*
        key: cache-build-${{ github.run_id }}-${{ github.run_number }}
    - uses: actions/cache@v2
      with:
        path: |
          **/node_modules
          ~/.cache/Cypress
          ~/.npm
        key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
    - run: npm install
    - run: docker-compose up -d --build
    - name: Waiting for the dockers to be ready
      run: timeout 3m bash -c 'until [[ "$(docker ps --filter health=starting -q | wc -l)" == "0" ]]; do sleep 1; done'
    - run: docker ps
      if: failure()
    - run: ./node_modules/.bin/cypress run --browser=${{ matrix.browser }}
    - run: docker-compose logs
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: cypress-videos
        path: cypress/videos
#  docker_image:
#    name: Docker image
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#    - run: make docker-prod
#    - run: docker create --name=kanjimi-server kanjimi-server
#    - run: docker start kanjimi-server
#    - name: Waiting for the container to be ready
#      run: timeout 3m bash -c 'until [[ "$(docker ps --filter health=starting -q | wc -l)" == "0" ]]; do sleep 1; done'
#    - run: docker ps
#    - name: Fail if not healthy
#      run: if [[ "$(docker ps --filter health=healthy -q | grep kanjimi-server | wc -l)" == "0" ]]; then exit 1; fi
#    - run: docker logs kanjimi-server
#      if: failure()
